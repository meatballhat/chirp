#!/usr/bin/env ruby
# frozen_string_literal: true

require 'digest/sha2'

require 'faraday'
require 'faraday_middleware'

DEFAULT_CHIRP_NETWORK_URLS = %w[
  https://apt.postgresql.org/pub/repos/apt/dists/trusty-pgdg/9.4/binary-amd64/
  http://archive.debian.org/debian/dists/lenny/main/binary-ia64/
  http://dev.mysql.com/get/mysql-apt-config_0.3.2-1ubuntu14.10_all.deb
  https://developer.android.com/ndk/
  http://ppa.launchpad.net/chris-lea/redis-server/ubuntu/dists/trusty/main/binary-amd64/
  http://us.archive.ubuntu.com/ubuntu/dists/bionic/main/binary-amd64/
  https://www.google.com
  https://bitbucket.org/pypy/pypy/src/tip/pypy/test_all.py
  https://github.com/rails/rails/tree/master/Gemfile
  https://registry.npmjs.org/express
  https://s3.amazonaws.com/travis-blue-public/fake-cache-blob.bin
  https://s3.amazonaws.com/travis-build-examples/index.html
  https://travis-ci.org/travis-ci/chirp
  https://www.npmjs.com/package/express
].join(' ')

def main
  ENV['AWS_REGION'] ||= 'us-east-1'
  ENV['CHIRP_NETWORK_URLS'] ||= DEFAULT_CHIRP_NETWORK_URLS

  parallel_download(
    urls: ENV['CHIRP_NETWORK_URLS'].split(/[ ,]+/).map(&:strip)
  )

  0
end

def parallel_download(urls: [])
  downloads = {}

  conn = Faraday.new do |builder|
    builder.response :follow_redirects
    builder.response :raise_error
    builder.adapter :net_http
  end

  urls.each do |url|
    downloads[url] = {
      thr: nil,
      resp: nil,
      done: false
    }

    downloads[url][:thr] = Thread.new do
      downloads[url][:resp] = conn.get(url)
    end
  end

  loop do
    downloads.each do |url, h|
      next if h[:done]
      resp = h[:resp] || h[:thr].join(0.1)
      next if resp.nil?

      if resp.respond_to?(:alive?) && !resp.alive?
        h[:done] = true
        next
      end

      h[:resp] = resp

      next unless resp.finished?
      h[:done] = true
      sha256sum = Digest::SHA256.hexdigest(resp.body)
      warn("     GET=#{url} status=#{resp.status}")
      warn("       len=#{resp.body.size} sha256sum=#{sha256sum}")
    end

    break if downloads.map { |_, h| h[:done] }.all?
  end

  failed = []

  downloads.each do |url, h|
    unless !h[:resp].nil? && h[:resp].success?
      failed << "url=#{url} status=#{h[:resp].status}"
    end
  end

  raise "not all requests succeeded: #{failed.join(', ')}" unless failed.empty?
end

exit(main) if $PROGRAM_NAME == __FILE__
