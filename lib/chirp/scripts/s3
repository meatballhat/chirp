#!/usr/bin/env ruby
# frozen_string_literal: true

require 'digest/sha2'
require 'fileutils'
require 'tmpdir'

require 'aws-sdk-s3'
require 'faraday'
require 'faraday_middleware'

def main
  ENV['AWS_REGION'] ||= 'us-east-1'
  ENV['CHIRP_S3_BUCKET'] ||= 'travis-ci-chirp-artifacts'
  ENV['CHIRP_S3_REPEATS'] ||= '20'
  ENV['CHIRP_S3_SIZE_MB'] ||= '25'
  ENV['CHIRP_SCRATCH'] ||= File.join(Dir.tmpdir, 'chirp-network')

  s3_repeats = Integer(ENV['CHIRP_S3_REPEATS'])
  s3_size_mb = Integer(ENV['CHIRP_S3_SIZE_MB'])

  FileUtils.mkdir_p(ENV['CHIRP_SCRATCH'])

  s3_repeats.times do
    s3_updown(
      bucket: ENV['CHIRP_S3_BUCKET'],
      region: ENV['AWS_REGION'],
      dist: ENV.fetch('DIST', ENV.fetch('IMAGE', 'unknown')),
      queue: ENV.fetch('QUEUE', 'unknown'),
      site: ENV.fetch('SITE', 'unknown'),
      scratch_dir: ENV['CHIRP_SCRATCH'],
      size_mb: s3_size_mb
    )
  end

  0
end

def s3_updown(bucket: '', region: 'us-east-1', dist: 'unknown',
              queue: 'unknown', site: 'unknown', scratch_dir: '.',
              size_mb: 25)
  basename = "test.#{Time.now.utc.to_f}.txt"
  s3key = File.join(dist, queue, site, basename)
  local_file = File.join(scratch_dir, basename)

  generate_local_file(local_file: local_file, size_mb: size_mb)

  sha2 = Digest::SHA2.new(256)
  File.open(local_file) do |f|
    loop do
      break if f.eof?
      sha2 << f.read(1024)
    end
  end

  sha256sum = sha2.hexdigest

  warn "    uploading #{local_file} -> #{bucket}/#{s3key}"
  warn "      sha256sum=#{sha256sum}"
  Aws::S3::Resource.new(region: region)
                   .bucket(bucket)
                   .object(s3key)
                   .upload_file(local_file)

  Aws::S3::Client.new(region: region)
                 .put_object_acl(
                   bucket: bucket,
                   acl: 'public-read',
                   key: s3key
                 )

  dl_url = "https://s3.amazonaws.com/#{bucket}/#{s3key}"
  warn "    downloading #{dl_url}"

  conn = Faraday.new do |builder|
    builder.request :retry, max: 2, interval: 5, interval_randomness: 0.5,
                            backoff_factor: 2
    builder.response :follow_redirects
    builder.adapter :net_http
  end

  dl_resp = conn.get("https://s3.amazonaws.com/#{bucket}/#{s3key}")

  if dl_resp.success?
    sha2.reset
    sha2 << dl_resp.body
    warn "      sha256sum=#{sha2.hexdigest}"
  end

  Aws::S3::Resource.new(region: region)
                   .bucket(bucket)
                   .object(s3key)
                   .delete

  unless dl_resp.success?
    warn "re-download status=#{dl_resp.status} headers=#{dl_resp.headers}"
    raise 'failed to re-download test file'
  end

  return if sha256sum == sha2.hexdigest

  warn "upload #{sha256sum} != download #{sha2.hexdigest}"
  raise 'download does not match upload'
end

def generate_local_file(local_file: '', size_mb: 10)
  File.open('/dev/zero') do |zero|
    File.open(local_file, 'w') do |out|
      out.sync = true
      size_mb.times { out.write(zero.read(1_000_000)) }
      out.write(SecureRandom.hex(16))
    end
  end
end

exit(main) if $PROGRAM_NAME == __FILE__
